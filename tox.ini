[tox]
skipsdist = true
envlist = lint,default
requires = tox-venv
           tox-pip-version
           tox-docker>=3.0.0
provision_tox_env=provision
source_package = pytest_dhos
all_sources = {[tox]source_package} tests/


[docker:neo4j]
image = neo4j:3.5
environment =
    NEO4J_AUTH=none
ports=7474:7474/tcp
    7687:7687/tcp

[flake8]
max-line-length = 100

[testenv:provision]
envdir={toxworkdir}/.provision

[testenv:default]
docker = neo4j
dockerenv = NEO4J_AUTH=none

[testenv:install-deps]
commands =
    poetry export -f requirements.txt -o {envtmpdir}/poetry-requirements.txt --with-credentials --without-hashes --dev --extras fbi --extras neo
    pip install --no-deps -r {envtmpdir}/poetry-requirements.txt
allowlist_externals =
        poetry
        true

[testenv]
envdir = {toxworkdir}/py39

passenv = NEO4J_DB_URL
          CIRCLECI

setenv = ENVIRONMENT = DEVELOPMENT
         AUTH0_AUDIENCE = https://dhos-dev.draysonhealth.com/
         IGNORE_JWT_VALIDATION = True
         HS_KEY = secret
         PROXY_URL = http://localhost
         EPR_SERVICE_ADAPTER_ISSUER = https://epr.ouh.sensynehealth.com/
         REDIS_INSTALLED=False


commands = poetry install -v -E "fbi neo"
           black --check {[tox]source_package} tests/
           isort --profile black {[tox]source_package} tests/ --check-only
           mypy {[tox]source_package}
           bandit -r {[tox]source_package} -lll
           safety check
           coverage erase
           coverage run --source {[tox]source_package} -m py.test {posargs}
           coverage report
           coverage xml -i -o coverage-reports/coverage.xml
allowlist_externals =
        bandit
        bash
        black
        coverage
        isort
        mypy
        poetry
        python
        safety
        sh
        true
list_dependencies_command = true


[testenv:lint]
description = Run black, isort, and mypy to clean up source files
commands =
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy {[tox]source_package} tests/

[testenv:debug]
description = Run last failing unit test and invoke debugger on errors
commands =
    pytest --lf --pdb

[testenv:update]
description = Update poetry lock files
commands = poetry update
